import os
import json
from paths import TASK_FILE, FILE_ATTRIBUTE_HIDDEN
import ctypes
import tkinter as tk
from tkinter import filedialog
import time
import psutil
import win32file

def load_tasks():
    if not os.path.exists(TASK_FILE):
        with open(TASK_FILE, "w", encoding='utf-8') as file:
            json.dump([], file)  # T·∫°o file tr·ªëng v·ªõi danh s√°ch r·ªóng []
        print(f"üìÅ ƒê√£ t·∫°o {TASK_FILE} v√¨ kh√¥ng t√¨m th·∫•y.")

    with open(TASK_FILE, "r", encoding='utf-8') as file:
        return json.load(file)

def save_tasks(tasks):
    """L∆∞u danh s√°ch ti·∫øn tr√¨nh v√†o file JSON"""
    with open(TASK_FILE, "w", encoding='utf-8') as f:
        json.dump(tasks, f, indent=4)

def get_drive_uuid(path):
    """L·∫•y UUID c·ªßa ·ªï ƒëƒ©a t·ª´ ƒë∆∞·ªùng d·∫´n tr√™n Windows"""
    drive = os.path.splitdrive(path)[0]  # L·∫•y k√Ω t·ª± ·ªï ƒëƒ©a (D:, E:, ...)
    if not drive:
        return None  # Tr·∫£ v·ªÅ None n·∫øu kh√¥ng c√≥ k√Ω t·ª± ·ªï ƒëƒ©a
    
    try:
        volume_guid = win32file.GetVolumeNameForVolumeMountPoint(f"{drive}\\")
        return volume_guid.strip("\\")  # X√≥a k√Ω t·ª± "\" th·ª´a
    except Exception as e:
        print(f"L·ªói khi l·∫•y UUID c·ªßa ·ªï {drive}: {e}")
        return None

def select_folder(title="Ch·ªçn th∆∞ m·ª•c"):
    """M·ªü h·ªôp tho·∫°i ch·ªçn th∆∞ m·ª•c v√† l·∫•y UUID c·ªßa ·ªï ƒëƒ©a"""
    root = tk.Tk()
    root.withdraw()
    folder = filedialog.askdirectory(title=title)
    root.destroy()

    if folder:
        uuid = get_drive_uuid(folder)
        return folder, uuid
    return None

def is_hidden(filepath):
    """Ki·ªÉm tra xem t·ªáp/th∆∞ m·ª•c c√≥ thu·ªôc t√≠nh ·∫©n kh√¥ng"""
    try:
        attrs = ctypes.windll.kernel32.GetFileAttributesW(filepath)
        return attrs & FILE_ATTRIBUTE_HIDDEN
    except:
        return False

def set_hidden(filepath):
    """ƒê·∫∑t thu·ªôc t√≠nh ·∫©n cho t·ªáp/th∆∞ m·ª•c"""
    try:
        ctypes.windll.kernel32.SetFileAttributesW(filepath, FILE_ATTRIBUTE_HIDDEN)
    except:
        pass

def is_temp_file(filename):
    """Ki·ªÉm tra xem t·ªáp/th∆∞ m·ª•c c√≥ ph·∫£i l√† t·∫°m th·ªùi hay kh√¥ng."""
    temp_patterns = ["New folder", 
                     "New Text Document", 
                     "New shortcut", 
                     "New Microsoft Access Database", 
                     "New Bitmap image",
                     "New Microsoft Word Document",
                     "New Microsoft PowerPoint Presentation",
                     "New Microsoft Publisher Document",
                     "New Microsoft Excel Worksheet",
                     "New WinRAR ZIP archive"]
    return any(filename.startswith(pattern) or filename.endswith(pattern) for pattern in temp_patterns)

def is_recently_created(path, threshold=60):
    """Ki·ªÉm tra xem t·ªáp ho·∫∑c th∆∞ m·ª•c c√≥ ƒë∆∞·ª£c t·∫°o trong v√≤ng `threshold` gi√¢y kh√¥ng."""
    creation_time = os.path.getctime(path)
    current_time = time.time()
    return (current_time - creation_time) < threshold

def list_files_and_folders(directory):
    result = {}
    
    for root, dirs, files in os.walk(directory):
        relative_path = os.path.relpath(root, directory)
        if relative_path == ".":
            relative_path = directory  # Th∆∞ m·ª•c g·ªëc
        result[relative_path] = {"folders": dirs, "files": files}
    
    return result